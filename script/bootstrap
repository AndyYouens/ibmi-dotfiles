#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="/QOpenSys/etc/ibmi-dotfiles"

set -e

install_path=${HOME};
cmd=`basename "$0"`

print_use () {
    echo "Use: ${cmd} [--install-path <path>]"
    echo "e.g.: ${cmd} --install-path /home/username"
    exit 1
}

while [[ $# -gt 0 ]]
do
    key="${1}"
    case ${key} in
    -i|--install-path)
        install_path="${2}"
        shift # past argument
        shift # past value
        ;;
    -h|--help)
        print_use
        shift # past argument
        ;;
    *)    # unknown option
        shift # past argument
        ;;
    esac
done

echo ''

info () {
    printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

setup_gitconfig () {
    if ! [[ -f "${DOTFILES_ROOT}git/gitconfig.symlink" ]]
        then
        info 'setup gitconfig'

        user ' - What is your github author name?'
        read -e git_authorname
        user ' - What is your github author email?'
        read -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" \
        "${DOTFILES_ROOT}/git/gitconfig.symlink.example" > "${DOTFILES_ROOT}/git/gitconfig.symlink"

        success 'gitconfig'
    fi
}

link_files () {
    ln -s $1 $2
    success "linked $1 to $2"
}

copy_files () {
    cp -r $1 $2
    success "copied $1 to $2"
}

install_dotfiles () {
    info 'installing dotfiles'

    overwrite_all=false
    backup_all=false
    skip_all=false

    for source in `/QOpenSys/pkgs/bin/find ${DOTFILES_ROOT} -maxdepth 2 -name \*.symlink`
    do
        dest="${install_path}/.`basename \"${source%.*}\"`"

        if [[ -f ${dest} ]] || [[ -d ${dest} ]]
            then

            overwrite=false
            backup=false
            skip=false

            if [[ "$overwrite_all" == "false" ]] && [[ "$backup_all" == "false" ]] && [[ "$skip_all" == "false" ]]
                then
                user "File already exists: `basename ${source}`, what do you want to do?
                [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                    overwrite=true;;
                    O )
                    overwrite_all=true;;
                    b )
                    backup=true;;
                    B )
                    backup_all=true;;
                    s )
                    skip=true;;
                    S )
                    skip_all=true;;
                    * )
                    ;;
                esac
            fi

            if [[ "$overwrite" == "true" ]] || [[ "$overwrite_all" == "true" ]]
                then
                rm -rf ${dest}
                success "removed ${dest}"
            fi

            if [[ "$backup" == "true" ]] || [[ "$backup_all" == "true" ]]
                then
                mv ${dest} ${dest}\.backup
                success "moved ${dest} to ${dest}.backup"
            fi

            if [[ "$skip" == "false" ]] && [[ "$skip_all" == "false" ]]
                then
                copy_files ${source} ${dest}
            else
                success "skipped ${source}"
            fi

        else
            copy_files ${source} ${dest}
        fi

    done
}

setup_gitconfig
install_dotfiles

echo ''
echo '  All installed!'
